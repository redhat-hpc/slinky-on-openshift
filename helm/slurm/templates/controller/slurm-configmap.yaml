{{- /*
SPDX-FileCopyrightText: Copyright (C) SchedMD LLC.
SPDX-License-Identifier: Apache-2.0
*/}}

{{- $nodesetList := list "ALL" -}}
{{- $failList := list "slurm.conf" "slurmdbd.conf" -}}
{{- $allowList := list "acct_gather.conf" "burst_buffer.conf" "cgroup.conf" "gres.conf" "helpers.conf" "job_container.conf" "mpi.conf" "oci.conf" "plugstack.conf" "topology.conf" -}}
{{- $partitionList := list -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "slurm.configMapName" . }}
  namespace: {{ include "slurm.namespace" . }}
  labels:
    {{- include "slurm.labels" . | nindent 4 }}
data:
  slurm.conf: |
    #
    ### CLUSTER ###
    ClusterName={{- include "slurm.name" . }}
    SlurmctldHost={{- printf "%s-0" (include "slurm.controller.name" $) }}
    SlurmctldPidFile=/var/run/slurmctld.pid
    SlurmctldPort={{- include "slurm.controller.port" . }}
    SlurmdPidFile=/var/run/slurmd.pid
    SlurmdPort={{- include "slurm.compute.port" . }}
    SlurmdSpoolDir={{- include "slurm.compute.spoolDir" . }}
    SlurmUser={{- include "slurm.user" . }}
    SlurmdUser=root
    StateSaveLocation={{- include "slurm.controller.statesavePath" . }}
    GresTypes=gpu
    ReturnToService=2
    MaxNodeCount=1024
    {{- if or .Values.slurm.prologScripts .Values.slurm.epilogScripts }}
    #
    ### PROLOG & EPILOG ###
    {{- range $filename, $script := .Values.slurm.prologScripts }}
    Prolog={{- printf "prolog-%s" $filename }}
    {{- end }}{{- /* range $filename, $script := .Values.slurm.prologScripts */}}
    {{- range $filename, $script := .Values.slurm.epilogScripts }}
    Epilog={{- printf "epilog-%s" $filename }}
    {{- end }}{{- /* range $filename, $script := .Values.slurm.epilogScripts */}}
    {{- end }}{{- /* if or .Values.slurm.prologScripts .Values.slurm.epilogScripts */}}
    #
    ### LOGGING ###
    SlurmctldLogFile={{- include "slurm.controller.logFile" . }}
    SlurmSchedLogFile={{- include "slurm.controller.logFile" . }}
    SlurmdLogFile={{- include "slurm.compute.logFile" . }}
    LogTimeFormat=iso8601_ms,format_stderr
    #
    ### PLUGINS & PARAMETERS ###
    AuthType=auth/slurm
    CredType=cred/slurm
    AuthInfo=use_client_ids
    AuthAltTypes=auth/jwt
    AuthAltParameters=jwt_key={{- include "slurm.jwt.hs256.fullPath" . }}
    CommunicationParameters=block_null_hash
    LaunchParameters=enable_nss_slurm,use_interactive_step,ulimit_pam_adopt
    ProctrackType=proctrack/cgroup
    SelectTypeParameters=CR_Core_Memory
    SlurmctldParameters=enable_configless,enable_stepmgr
    TaskPlugin=task/cgroup,task/affinity
    PrologFlags=Contain
    #
    ### ACCOUNTING ###
    {{- if .Values.accounting.enabled }}
    JobAcctGatherType=jobacct_gather/cgroup
    JobAcctGatherFrequency=task=30
    AccountingStorageTRES=gres/gpu
    AccountingStorageType=accounting_storage/slurmdbd
    AccountingStorageHost={{- include "slurm.accounting.name" . }}
    AccountingStoragePort={{- include "slurm.accounting.port" . }}
    {{- else }}{{- /* if .Values.accounting.enabled */}}
    JobAcctGatherType=jobacct_gather/none
    AccountingStorageType=accounting_storage/none
    {{- end }}{{- /* if .Values.accounting.enabled */}}
    #
    ### COMPUTE & PARTITION ###
    {{- range $nodeset := .Values.compute.nodesets -}}
    {{- if $nodeset.enabled }}
    {{- if has $nodeset.name $nodesetList }}
    {{- fail (printf "nodeset with name `%s` already exists." $nodeset.name) }}
    {{- end }}{{- /* if has $nodeset.name $nodesetList */}}
    {{- $nodesetList = append $nodesetList $nodeset.name }}
    NodeSet={{- $nodeset.name }} Feature={{- $nodeset.name }}
    {{- if $nodeset.partition.enabled }}
    {{- $nodesetPartitionConfig := list -}}
    {{- range $key, $val := $nodeset.partition.config }}
    {{- if $val }}
    {{- $nodesetPartitionConfig = append $nodesetPartitionConfig (printf "%s=%s" $key (join "," $val)) -}}
    {{- end }}{{- /* if $val */}}
    {{- end }}{{- /* range $key, $val := $nodeset.partition.config */}}
    PartitionName={{- $nodeset.name }} Nodes={{- $nodeset.name }} {{ join " " $nodesetPartitionConfig }}
    {{- end }}{{- /* if $nodeset.partition.enabled */}}
    {{- end }}{{- /* if $nodeset.enabled */}}
    {{- end }}{{- /* range $nodeset := .Values.compute.nodesets */}}
    {{- range $part := .Values.compute.partitions -}}
    {{- if and $part.enabled $part.nodesets }}
    {{- range $part_nodeset_name := $part.nodesets -}}
    {{- if not (has $part_nodeset_name $nodesetList) }}
    {{- fail (printf "partition `%s` is referencing nodeset `%s` that does not exist or is disabled." $part.name $part_nodeset_name) }}
    {{- end }}{{- /* if not (has $part_nodeset_name $nodesetList) */}}
    {{- end }}{{- /* range $part_nodeset_name := $part.nodesets */}}
    {{- if has $part.name $partitionList }}
    {{- fail (printf "partition with name `%s` already exists." $part.name) }}
    {{- end }}{{- /* if has $part.name $partitionList */}}
    {{- $partitionList = append $partitionList $part.name }}
    {{- $partConfig := list -}}
    {{- range $key, $val := $part.config }}
    {{- if $val }}
    {{- $partConfig = append $partConfig (printf "%s=%s" $key (join "," $val)) -}}
    {{- end }}{{- /* if $val */}}
    {{- end }}{{- /* range $key, $val := $part.config */}}
    PartitionName={{- $part.name }} Nodes={{- join "," $part.nodesets }} {{ join " " $partConfig }}
    {{- end }}{{- /* if and $part.enabled $part.nodesets */}}
    {{- end }}{{- /* range $part := .Values.compute.partitions */}}
    {{- with .Values.slurm.extraSlurmConf }}
    #
    ### EXTRA CONFIG ###
    {{- include "expand-map" . | nindent 4 }}
    {{- end }}{{- /* with .Values.slurm.extraSlurmConf */}}
  {{- range $key, $val := .Values.slurm.configFiles -}}
  {{- if or (has $key $failList) (not (has $key $allowList)) }}
  {{- fail (printf "configFiles cannot contain `%s`: either is not a valid config file or is reserved for chart use" $key) }}
  {{- end }}{{- /* if or (has $key $failList) (not has $key $allowList) */}}
  {{ $key -}}: |
    {{- $val | nindent 4 }}
  {{- end }}{{- /* range $key, $val := .Values.slurm.configFiles */}}
  {{- range $filename, $script := .Values.slurm.prologScripts }}
  {{ printf "prolog-%s" $filename }}: |
    {{- $script | nindent 4 }}
  {{- end }}{{- /* range $filename, $script := .Values.slurm.prologScripts */}}
  {{- range $filename, $script := .Values.slurm.epilogScripts }}
  {{ printf "epilog-%s" $filename }}: |
    {{- $script | nindent 4 }}
  {{- end }}{{- /* range $filename, $script := .Values.slurm.epilogScripts */}}
